package org.team340.lib.control;

import edu.wpi.first.math.interpolation.InterpolatingDoubleTreeMap;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj2.command.Command;
import java.util.ArrayList;
import java.util.List;
import org.json.simple.JSONArray;
import org.team340.lib.commands.CommandBuilder;
import org.team340.lib.math.Math2;
import org.team340.lib.math.Polar2d;

public class JoystickProfiler {

    private final GenericHID controller;
    private final InterpolatingDoubleTreeMap data = new InterpolatingDoubleTreeMap();
    private final int xAxis;
    private final int yAxis;

    /**
     * Class for record controller joysticks' outputs and saving as json.
     * For use in correcting irregular joystick output shape.
     */
    public JoystickProfiler(GenericHID controller, int xAxis, int yAxis) {
        this.controller = controller;
        this.xAxis = xAxis;
        this.yAxis = yAxis;
    }

    /**
     * Clears current data variable.
     */
    public void clearData() {
        data.clear();
    }

    /**
     * Collects data from joystick. Should be run periodically.
     */
    public void pollData() {
        double x = controller.getRawAxis(xAxis);
        double y = controller.getRawAxis(yAxis);
        double theta = Math.atan2(y, x);
        double r = Math.hypot(x, y);
        data.put(theta, r);
    }

    /**
     * Generates profile using data collected by {@link JoystickProfiler#pollData() pollData()}.
     * @param samplePoints Number of points to sample.
     * @return The joystick profile.
     */
    public List<Polar2d> generateProfile(int samplePoints) {
        List<Polar2d> profile = new ArrayList<>();

        for (int i = 0; i < samplePoints; i++) {
            double theta = (double) i / (double) samplePoints * Math2.TWO_PI;
            profile.add(new Polar2d(theta, data.get(theta)));
        }
        return profile;
    }

    /**
     * Write profile generated by {@link JoystickProfiler#generateProfile() generateProfile()} to console.
     * @param rawProfile Profile to write to file.
     */
    public void writeToConsole(List<Polar2d> rawProfile) {
        List<List<Double>> profile = new ArrayList<List<Double>>();
        for (Polar2d polar2d : rawProfile) {
            profile.add(List.of(polar2d.getR(), polar2d.getTheta()));
        }
        System.out.println(JSONArray.toJSONString(profile));
    }

    /**
     * Command to profile axis of a controller joystick and print to console.
     * @param controller Controller to profile.
     * @param xAxis X-Axis of controller joystick.
     * @param yAxis Y-Axis of controller joystick.
     * @param samplePoints Number of points to sample.
     */
    public static Command command(GenericHID controller, int xAxis, int yAxis, int samplePoints) {
        JoystickProfiler profiler = new JoystickProfiler(controller, xAxis, yAxis);
        return new CommandBuilder()
            .onInitialize(profiler::clearData)
            .onExecute(profiler::pollData)
            .onEnd(() -> profiler.writeToConsole(profiler.generateProfile(samplePoints)));
    }
}
